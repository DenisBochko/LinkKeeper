package TGinter

import (
	"bytes"
	"context"
	"encoding/json"
	"fmt"
	"log"
	"net/http"
	"os"
	"strconv"
	"strings"
	"time"

	ai "LinkKeeper/analyzer"
	db "LinkKeeper/database"

	"github.com/joho/godotenv"
)

type TGinter struct {
	OK bool
}

// –¢–∏–ø—ã –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–∞–Ω–Ω—ã—Ö, –ø–æ–ª—É—á–∞–µ–º—ã—Ö –æ—Ç API
type Chat struct {
	ID int64 `json:"id"`
}

type Message struct {
	Text string `json:"text"`
	Chat Chat   `json:"chat"`
}

type Update struct {
	UpdateID int     `json:"update_id"`
	Message  Message `json:"message"`
}

type Response struct {
	OK     bool     `json:"ok"`
	Result []Update `json:"result"`
}

type User struct {
	ID        int64  `json:"id"`
	IsBot     bool   `json:"is_bot"`
	FirstName string `json:"first_name"`
}

// —Ç–∏–ø—ã –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
type KeyboardButton struct {
	Text string `json:"text"`
}

type ReplyKeyboardMarkup struct {
	Keyboard        [][]KeyboardButton `json:"keyboard"`
	ResizeKeyboard  bool               `json:"resize_keyboard"`
	OneTimeKeyboard bool               `json:"one_time_keyboard"`
}

// –§—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ —Ç–µ–ª–µ–≥—Ä–∞–º-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
func (t TGinter) Start(ctx context.Context, saveChan, getChan, deleteChan, deleteOfItemChan chan<- db.Field, receiveChan <-chan []db.Field, sendAiChan chan<- ai.Field, getAiChan <-chan ai.Field) {
	offset := 0
	timeout := 60

	replyKeyboard := ReplyKeyboardMarkup{
		Keyboard: [][]KeyboardButton{
			{
				{"/list"},
				{"/delete [–Ω–æ–º–µ—Ä —Å—Å—ã–ª–∫–∏]"},
			},
			{
				{"/clear"},
				{"/analyze"},
			},
		},
		ResizeKeyboard:  true,
		OneTimeKeyboard: true,
	}

	TOKEN, err := t.getTOKEN()
	if err != nil {
		fmt.Println("telegramInterface: –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–∞")
	}
	APIURL := "https://api.telegram.org/bot" + TOKEN + "/"
loop:
	for {
		select {
		case <-ctx.Done():
			fmt.Println("telegramInterface: –û—Ç–∫–ª—é—á–∞–µ–º —Ä–∞–±–æ—Ç—É TG –±–æ—Ç–∞")
			break loop
		case body := <-getAiChan:
			if err := t.sendMessage(body.CHATID, body.ResponseText, replyKeyboard, APIURL); err != nil {
				log.Println("Error sending message:", err)
			}
		default:
			// –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å updates
			updates, err := t.getUpdates(offset, timeout, APIURL)
			if err != nil {
				log.Println("Error fetching updates:", err)
				continue
			}

			for _, update := range updates {
				// –û–±–Ω–æ–≤–ª—è–µ–º offset, —á—Ç–æ–±—ã –Ω–µ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å –æ–¥–Ω–æ –∏ —Ç–æ –∂–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–≤–∞–∂–¥—ã
				offset = update.UpdateID + 1

				chatID := update.Message.Chat.ID
				text := update.Message.Text
				// Reply Keyboard
				replyKeyboard := ReplyKeyboardMarkup{
					Keyboard: [][]KeyboardButton{
						{
							{"/list"},
							{"/delete [–Ω–æ–º–µ—Ä —Å—Å—ã–ª–∫–∏]"},
						},
						{
							{"/clear"},
							{"/analyze"},
						},
					},
					ResizeKeyboard:  true,
					OneTimeKeyboard: true,
				}
				// —Å–æ–¥–µ—Ä–∂–∏—Ç –ª–∏ text –ø–æ–¥—Å—Ç—Ä–æ–∫—É https://
				if strings.Contains(text, "https://") {
					saveChan <- db.Field{
						ID:           0,
						UserID:       strconv.Itoa(int(chatID)),
						UserURL:      text,
						DeleteNumber: 0,
					}
					if err := t.sendMessage(chatID, "–í—ã —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–∏–ª–∏ —Å—Å—ã–ª–∫—É ‚úÖ", replyKeyboard, APIURL); err != nil {
						log.Println("Error sending message:", err)
					}

				} else if strings.Contains(text, "/delete") {
					fmt.Println("–≤—ã–∑–≤–∞–ª–∞—Å—å —ç—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è!", text)
					message := strings.Split(text, " ")
					if len(message) <= 1 {
						if err := t.sendMessage(chatID, "–ù–£–ñ–ù–û –£–ö–ê–ó–ê–¢–¨ –ù–û–ú–ï–† –í–ê–®–ï–ô –°–´–õ–ö–ò! ü§¨", replyKeyboard, APIURL); err != nil {
							log.Println("Error sending message:", err)
						}
					} else {
						deleteNum, err := strconv.Atoi(message[1])
						if err != nil {
							if err := t.sendMessage(chatID, "–ù—É–∂–Ω–æ —É–∫–∞–∑–∞—Ç—å –Ω–æ–º–µ—Ä —Å—Å—ã–ª–∫–∏ üòÅ", replyKeyboard, APIURL); err != nil {
								log.Println("Error sending message:", err)
							}
							continue
						}

						deleteOfItemChan <- db.Field{
							ID:           0,
							UserID:       strconv.Itoa(int(chatID)),
							UserURL:      text,
							DeleteNumber: deleteNum,
						}

						if err := t.sendMessage(chatID, fmt.Sprintf("–£—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–∞ —Å—Å—ã–ª–∫–∞ ‚Ññ%d üóëÔ∏è", deleteNum), replyKeyboard, APIURL); err != nil {
							log.Println("Error sending message:", err)
						}
					}
					// –æ—Å—Ç–∞–ª—å–Ω—ã–µ —Å–ª—É—á–∞–∏
				} else {
					switch text {
					case "/clear":
						deleteChan <- db.Field{
							ID:           0,
							UserID:       strconv.Itoa(int(chatID)),
							UserURL:      text,
							DeleteNumber: 0,
						}
						if err := t.sendMessage(chatID, "–£—Å–ø–µ—à–Ω–æ –æ—á–∏—â–µ–Ω —Å–ø–∏—Å–æ–∫ –≤–∞—à–∏—Ö —Å—Å—ã–ª–æ–∫ üóëÔ∏è", replyKeyboard, APIURL); err != nil {
							log.Println("Error sending message:", err)
						}
					case "/list":
						getChan <- db.Field{ID: 0,
							UserID:       strconv.Itoa(int(chatID)),
							UserURL:      text,
							DeleteNumber: 0,
						}
						select {
						case fields := <-receiveChan:
							if len(fields) == 0 {
								t.sendMessage(chatID, "–£ –≤–∞—Å –Ω–µ—Ç —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã—Ö —Å—Å—ã–ª–æ–∫ üôÑ", replyKeyboard, APIURL)
							} else {
								t.sendMessage(chatID, "–í–æ—Ç –≤–∞—à–∏ —Å—Å—ã–ª–∫–∏: ü§©", replyKeyboard, APIURL)
								for i, field := range fields {
									t.sendMessage(chatID, fmt.Sprint(i+1, ") ", field.UserURL), replyKeyboard, APIURL)
								}
							}
						case <-time.After(5 * time.Second):
							t.sendMessage(chatID, "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å—Å—ã–ª–∫–∏, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.", replyKeyboard, APIURL)
						}
					case "/analyze":
						urlsForAi := make([]string, 0, 10)

						getChan <- db.Field{ID: 0,
							UserID:       strconv.Itoa(int(chatID)),
							UserURL:      text,
							DeleteNumber: 0,
						}
						select {
						case fields := <-receiveChan:
							if len(fields) == 0 {
								t.sendMessage(chatID, "–£ –≤–∞—Å –Ω–µ—Ç —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã—Ö —Å—Å—ã–ª–æ–∫ üôÑ", replyKeyboard, APIURL)
							} else {
								t.sendMessage(chatID, "–ù–∞—á–∏–Ω–∞—é –∞–Ω–∞–ª–∏–∑", replyKeyboard, APIURL)

								for _, field := range fields {
									urlsForAi = append(urlsForAi, field.UserURL)
								}

								sendAiChan <- ai.Field{
									CHATID:       chatID,
									Urls:         urlsForAi,
									ResponseText: "",
								}
							}
						case <-time.After(5 * time.Second):
							t.sendMessage(chatID, "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å—Å—ã–ª–∫–∏, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.", replyKeyboard, APIURL)
						}
					case "/start":
						welcomeMessage := `–ü—Ä–∏–≤–µ—Ç! üëã

–Ø ‚Äî –±–æ—Ç, –∫–æ—Ç–æ—Ä—ã–π –ø–æ–º–æ–∂–µ—Ç —Ç–µ–±–µ —Å–æ—Ö—Ä–∞–Ω—è—Ç—å —Å—Å—ã–ª–∫–∏, —á—Ç–æ–±—ã –Ω–∏—á–µ–≥–æ –≤–∞–∂–Ω–æ–≥–æ –Ω–µ –ø–æ—Ç–µ—Ä—è–ª–æ—Å—å! üìå

–û—Ç–ø—Ä–∞–≤–ª—è–π –º–Ω–µ –ª—é–±—É—é —Å—Å—ã–ª–∫—É, –∏ —è —Å–æ—Ö—Ä–∞–Ω—é –µ—ë –¥–ª—è —Ç–µ–±—è. –¢—ã –≤—Å–µ–≥–¥–∞ —Å–º–æ–∂–µ—à—å –≤–µ—Ä–Ω—É—Ç—å—Å—è –∏ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–≤–æ–∏ —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã–µ —Å—Å—ã–ª–∫–∏, —á—Ç–æ–±—ã –±—ã—Å—Ç—Ä–æ –Ω–∞–π—Ç–∏ –Ω—É–∂–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é. –¢–∞–∫–∂–µ —É –º–µ–Ω—è –µ—Å—Ç—å —É–¥–æ–±–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ç–≤–æ–∏–º–∏ –∑–∞–ø–∏—Å—è–º–∏:

- /list ‚Äî –ø–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã–µ —Å—Å—ã–ª–∫–∏
- /delete [–Ω–æ–º–µ—Ä —Å—Å—ã–ª–∫–∏] ‚Äî —É–¥–∞–ª–∏—Ç—å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—É—é —Å—Å—ã–ª–∫—É
- /clear ‚Äî –æ—á–∏—Å—Ç–∏—Ç—å –≤—Å–µ —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã–µ —Å—Å—ã–ª–∫–∏
- /analyze - –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –≤–∞—à–∏ —Å—Å—ã–ª–∫–∏ –∏ –ø–æ—Ä–µ–∫–æ–º–µ–Ω–¥–æ–≤–∞—Ç—å –Ω–æ–≤—ã–µ

–ù–∞–¥–µ—é—Å—å, —á—Ç–æ –±—É–¥—É –ø–æ–ª–µ–∑–µ–Ω!`
						t.sendMessage(chatID, welcomeMessage, replyKeyboard, APIURL)
					}
				}
			}
		}
	}
}

// –§—É–Ω–∫—Ü–∏—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–∞ –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –æ–∫—Ä—É–∂–µ–Ω–∏—è
func (t TGinter) getTOKEN() (string, error) {
	if err := godotenv.Load(); err != nil {
		return "", fmt.Errorf("–æ—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –æ–∫—Ä—É–∂–µ–Ω–∏—è: %w", err)
	}
	TOKEN, exists := os.LookupEnv("TOKEN")
	if !exists {
		return "", fmt.Errorf("–ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –æ–∫—Ä—É–∂–µ–Ω–∏—è 'TOKEN' –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
	}
	return TOKEN, nil
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π
func (t TGinter) getUpdates(offset int, timeout int, APIURL string) ([]Update, error) {
	url := APIURL + fmt.Sprintf("getUpdates?offset=%d&timeout=%d", offset, timeout)

	// –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç —Å —Ç–∞–π–º–∞—É—Ç–æ–º –Ω–∞ 10 —Å–µ–∫—É–Ω–¥
	ctx, cancel := context.WithTimeout(context.Background(), 10*time.Second)
	defer cancel()

	// –°–æ–∑–¥–∞–µ–º –∑–∞–ø—Ä–æ—Å —Å –∫–æ–Ω—Ç–µ–∫—Å—Ç–æ–º
	req, err := http.NewRequestWithContext(ctx, "GET", url, nil)
	if err != nil {
		return nil, err
	}

	// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å
	resp, err := http.DefaultClient.Do(req)
	if err != nil {
		return nil, err
	}
	defer resp.Body.Close()
	// –î–µ–∫–æ–¥–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç
	var result struct {
		OK     bool     `json:"ok"`
		Result []Update `json:"result"`
	}
	if err := json.NewDecoder(resp.Body).Decode(&result); err != nil {
		return nil, err
	}

	return result.Result, nil
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è
func (t TGinter) sendMessage(chatID int64, text string, replyMarkup interface{}, APIURL string) error {
	apiURL := APIURL + "sendMessage"

	requestBody := map[string]interface{}{
		"chat_id":      chatID,
		"text":         text,
		"reply_markup": replyMarkup,
	}

	body, err := json.Marshal(requestBody)
	if err != nil {
		return err
	}

	// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º POST-–∑–∞–ø—Ä–æ—Å
	resp, err := http.Post(apiURL, "application/json", bytes.NewBuffer(body))
	if err != nil {
		return err
	}
	defer resp.Body.Close()

	return nil
}
